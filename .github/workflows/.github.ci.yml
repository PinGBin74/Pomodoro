name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Lint with Black
        run: poetry run black app

      - name: Lint with Ruff
        run: poetry run ruff check app

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Start docker compose services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: sleep 15

      - name: Run unit tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pomodoro
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: poetry run pytest tests/unit

  deploy:
    if: ${{ true }} 
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    environment: pomodoro

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and start ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_SECRET_KEY }}
          nohup ngrok http 8000 & sleep 5
          curl 127.0.0.1:4040/api/tunnels > tunnels.json

      - name: Show public URL
        run: |
          cat tunnels.json